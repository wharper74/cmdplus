This library follows the indications of the POSIX utility argument syntax document at https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/contents.html
with some changes to adhere to modern conventions.

The command line is composed by four elements:
  1.  Global options; they are specified using the symbol "-"; for example: -e or -A
  2.  Extended options; they are specified using "--"; for example: --recursive or --Add
  3.  Action, an optional value used when the command has multiple functionalities
  4.  Operands, the command inputs

Through this documentation, the terms option and attribute are equivalent


1. If an option needs a value or a list of values, the user can enable a format check on those values. 
3. All elements are saved into a context that is available to the application for reading.
4. Actions and options are declared programmatically
5. The library takes care of printing the command line help
6. The library takes care of converting the command line values into c++ primitive data types or generic lists.

Global options are always translated into boolean values; a true value indicates that the option has been used in the command line.

Extended optoins follow these converion rules:
  [0-9]+              ---> int
  [0-9]*[\.][0-9]+    ---> double
  [a-zA-z0-9]+        ---> string
  <val>, ... , <val>  ---> list<T>
  

When printing the help screen, the library uses these conventions:
	[ ] optional element
	{ } mandatory element
	
	[ operand ... ] A space separated list of zero, one or more elements of the same type
	{ operand ... } A space separated list of one or more mandatory elements of the same type
	{a|b}			      Mandatory choice between "a" or "b" 
	[a|b]			      Optional choice between "a" or "b" 
  
The help screen output is similar to this:

Version : major.minor.patch-build

utility_name [ global_option ...] [global_ext_option ...] [ action [action_ext_option ...] ] [ operand ... ]

	
The library parses the command line using this grammar:

Parser:
  short_string      := ^([-][a-zA-Z]|[0-9]+)$
  long_string       := ^([-]{2}[a-zA-Z0-9]+[[:space:]]*[=][[:space:]]*.+)$

  start             := [action] [global_options ...] [extended_options ...] [operands ...] | e
  global_options    := short_string | long_string
  action            := ^([a-zA-Z]+)$
  extended_options  := long_string
  operands          := .+
	