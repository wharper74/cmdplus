This library follows the indications of the POSIX utility argument syntax document at https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/contents.html
with some changes to adhere to modern conventions.


1. User specifies global options , commands and command options.
2. If an option needs a value or a list of values, the user can enable a format check on those values. 
3. Commands and options are saved into a context that is available to the application for reading.
4. Command line commands and options are declared programmatically
5. The library takes care of printing the command line help
6. The library takes care of converting the command line values into c++ primitive data types or generic lists.

By default, All options are translated into boolean values; a true value indicates that the option has been used in the command line.
For options that require a value , the following conversion rules apply:
  [0-9]+              ---> int
  [0-9]*[\.][0-9]+    ---> double
  [a-zA-z0-9]+        ---> string
  <val>, ... , <val>  ---> list<T>
  
The library identifies these resources:
  - option, an optional or mandatory boolean parameter; other type of parameters are supported.
  - command, an optional string that indicates which functionality the application needs to run.
  - operand, one or more targets for the application; for example, an operand can be a file  

When printing the help screen, the library uses these conventions:
	[ ] optional content
	{ } mandatory content
	
	[ operand ... ] A space separated list of zero, one or more operands of the same type
	{ operand ... } A space separated list of one or more mandatory operands of the same type
	{a|b}			      Mandatory choice between "a" or "b" 
	[a|b]			      Optional choice between "a" or "b" 
  

Version : major.minor.patch-build

utility_name [ global_options ... ] [ command [ command_options ... ] ] [ extended_options ... ] [ operand ... ]

	global_options  :	^(?:[-](?:[a-zA-Z]|[0-9]+))$
	command         :	^(?:[a-zA-Z][a-zA-Z0-9]*)$
	command_options : ^(?:[-][-][a-zA-Z][-a-zA-Z0-9]*(?:[\x3d].+)*)$
	options 		    : ^(?:[-][-][a-zA-Z][a-zA-Z0-9]*(?:[\x3d].+)*)$
	
	
	
For an hypotetical database utility, the output is like this
# query -h
query v1.2.3-9876 
Queries a database.

Usage : query OPTIONS... COMMANDS... [DATABASE]...
Usage : query -{up} -[owh] [oracle|mysql [output-format,select] ] [DATABASE]

GLOBAL OPTIONS
  -o FILE, --output FILE      Output is written to the specified FILE
  -u <USER>                   The database user
  -p <PWD>                    The database user's password
  -w                          Read Write session. The default is read only
  -h, --help
  
EXTENDED OPTIONS  
  --output-format=<FORMAT>    The output format: CSV or HTML
  --select=<SQL>              The query to execute
  
COMMANDS
  oracle              Connect to an oracle database
    --ip=<IPV4>         The database IP address
    --port=<PORT>       The database listening port
   
  mysql               Connect to a mysql database  


# query -r -u user -p mypassword oracle --ip=192.168.10.1 --port=8080 --select="select * from dual"  DB1